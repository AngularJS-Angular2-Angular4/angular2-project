{"version":3,"file":"1.chunk.js","sources":["webpack:///./src/main/frontend/app/+order/order.module.ts","webpack:///./src/main/frontend/app/+order/order.component.ts","webpack:///./src/main/frontend/app/+order/order.component.html","webpack:///./src/main/frontend/app/+order/order.component.scss"],"sourcesContent":["import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {FormsModule} from '@angular/forms';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {OrderComponent} from './order.component';\nimport {MdButtonModule} from '@angular2-material/button';\nimport {MdCardModule} from '@angular2-material/card';\nimport {MdCheckboxModule} from '@angular2-material/checkbox';\nimport {MdGridListModule} from '@angular2-material/grid-list';\nimport {MdIconModule} from '@angular2-material/icon';\nimport {MdInputModule} from '@angular2-material/input';\nimport {MdListModule} from '@angular2-material/list';\nimport {MdProgressBarModule} from '@angular2-material/progress-bar';\nimport {MdProgressCircleModule} from '@angular2-material/progress-circle';\nimport {MdRadioModule} from '@angular2-material/radio';\nimport {MdSidenavModule} from '@angular2-material/sidenav';\nimport {MdSlideToggleModule} from '@angular2-material/slide-toggle';\nimport {MdTabsModule} from '@angular2-material/tabs';\nimport {MdToolbarModule} from '@angular2-material/toolbar';\nimport {MdCoreModule} from '@angular2-material/core';\n\nexport const ROUTER_CONFIG = [\n  {path: '', component: OrderComponent, pathMatch: 'full'}\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(ROUTER_CONFIG),\n    FormsModule,\n    BrowserModule,\n    MdButtonModule,\n    MdCardModule,\n    MdCheckboxModule,\n    MdGridListModule,\n    MdIconModule,\n    MdInputModule,\n    MdListModule,\n    MdProgressBarModule,\n    MdProgressCircleModule,\n    MdRadioModule,\n    MdSidenavModule,\n    MdSlideToggleModule,\n    MdTabsModule,\n    MdToolbarModule,\n    MdCoreModule\n  ],\n  declarations: [OrderComponent],\n  bootstrap: [OrderComponent]\n})\nexport class OrderModule {\n  static routes = ROUTER_CONFIG;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./~/source-map-loader!./src/main/frontend/app/+order/order.module.ts","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../shared/auth/auth.service';\nimport {Http} from '@angular/http';\n\nconsole.log('`Order` component loaded asynchronously');\n\n@Component({\n  selector: 'orders',\n  styles: [require('./order.component.scss')],\n  template: require('./order.component.html')\n})\nexport class OrderComponent implements OnInit {\n\n  orders:Order[] = [];\n\n  editing:boolean = false;\n  editedOrder:Order = null;\n\n  constructor(public http:Http, public authService:AuthService) {\n  }\n\n\n  ngOnInit():any {\n    console.log('Order Management');\n    this.fetchOrders();\n  }\n\n  public editOrder(order:Order) {\n    this.editing = true;\n    this.editedOrder = JSON.parse(JSON.stringify(order));\n    this.scrollToTop();\n  }\n\n  public newOrder() {\n    this.editing = true;\n    this.editedOrder = {\n      id: null,\n      title: '',\n      content: '',\n      createdDate: null,\n      updatedDate: null,\n      version: null,\n      createdBy: null,\n      updatedBy: null,\n    };\n  }\n\n  public removeOrder(order:Order) {\n    this.deleteOrder(order);\n  }\n\n  public cancelEdit() {\n    this.editing = false;\n    this.editedOrder = null;\n    this.scrollToTop();\n  }\n\n  public refresh() {\n    this.cancelEdit();\n    this.fetchOrders();\n  }\n\n  private fetchOrders() {\n    this.http.get('/orders/', {headers: this.authService.getAuthorizationHeaders()})\n      .subscribe(\n        data => {\n          console.log(\" i am here\");\n          console.log(data.json());\n          this.orders = data.json();\n        },\n        err => console.log('Something went wrong')\n      );\n  }\n\n  private saveOrder(order:Order) {\n    this.http.post(`/orders/`, order, {headers: this.authService.getAuthorizationHeaders()})\n      .subscribe(\n        data => {\n          console.log('Saved', data.json());\n          this.updateOrAddOrderToList(data.json());\n        },\n        err => console.log('Something went wrong')\n      );\n  }\n\n  private deleteOrder(order:Order) {\n    this.http.delete(`/orders/${order.id}`, {headers: this.authService.getAuthorizationHeaders()})\n      .subscribe(\n        data => {\n          console.log('Removed', data.json());\n          this.removeOrderFromList(order);\n        },\n        err => console.log('Something went wrong')\n      );\n  }\n\n  private removeOrderFromList(order:Order) {\n    this.orders = this.orders.filter((x, idx, obs) => x.id !== order.id);\n    this.cancelEdit();\n  }\n\n  private updateOrAddOrderToList(order:Order) {\n    var changedList:Order[] = this.orders.filter((x, idx, obs) => x.id === order.id);\n    if (changedList.length === 0) {\n      this.orders.push(order);\n    } else {\n      changedList.forEach((x) => {\n        var index = this.orders.indexOf(x);\n        this.orders[index] = order;\n      });\n    }\n    this.cancelEdit();\n  }\n\n  private scrollToTop() {\n    var contentEl = document.querySelector('md-sidenav-layout > md-content');\n    if (contentEl) {\n      this.scrollTo(contentEl, 0, 100);\n    }\n  }\n\n  private scrollTo(element, to, duration) {\n    if (duration <= 0) return;\n    var difference = to - element.scrollTop;\n    var perTick = difference / duration * 10;\n\n    setTimeout(() => {\n      element.scrollTop = element.scrollTop + perTick;\n      if (element.scrollTop === to) return;\n      this.scrollTo(element, to, duration - 10);\n    }, 10);\n  }\n\n}\n\ninterface Order {\n  id:number;\n  uuid?:string;\n  title:string;\n  content:string;\n  createdDate:Date;\n  updatedDate:Date;\n  version:number;\n  createdBy:any;\n  updatedBy:any;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./~/source-map-loader!./src/main/frontend/app/+order/order.component.ts","module.exports = \"<md-toolbar align=\\\"end\\\">\\n  <button md-raised-button color=\\\"primary\\\" (click)=\\\"newOrder()\\\">new Order</button>\\n  <button md-raised-button color=\\\"secondary\\\" (click)=\\\"refresh()\\\">refresh</button>\\n</md-toolbar>\\n<md-card *ngIf=\\\"editing\\\">\\n  <md-card-title>Editing Order</md-card-title>\\n  <md-card-content>\\n    <form #editPostForm=\\\"ngForm\\\">\\n      <md-input placeholder=\\\"Title\\\" [(ngModel)]=\\\"editedOrder.title\\\" name=\\\"title\\\" maxLength=\\\"100\\\" required=\\\"required\\\"\\n                #titleField>\\n        <md-hint align=\\\"end\\\">{{titleField.characterCount}} / 100</md-hint>\\n      </md-input>\\n      <md-input rows=\\\"3\\\" type=\\\"Content\\\" placeholder=\\\"Content\\\" [(ngModel)]=\\\"editedOrder.content\\\" name=\\\"content\\\"\\n                maxLength=\\\"255\\\" required=\\\"required\\\" #contentField>\\n        <md-hint align=\\\"end\\\">{{contentField.characterCount}} / 255</md-hint>\\n      </md-input>\\n    </form>\\n  </md-card-content>\\n  <md-card-actions align=\\\"end\\\">\\n    <button md-raised-button color=\\\"accent\\\" (click)=\\\"saveOrder(editedOrder)\\\">save</button>\\n    <button md-raised-button color=\\\"primary\\\" (click)=\\\"cancelEdit()\\\">cancel</button>\\n  </md-card-actions>\\n</md-card>\\n<md-card *ngFor=\\\"let order of orders\\\" class=\\\"ordercard\\\">\\n  <md-card-title>{{order.title}}</md-card-title>\\n  <md-card-content>\\n    <p>{{order.content}}</p>\\n    <md-list>\\n      <md-list-item>\\n        <p md-line>id: {{order.id}}</p>\\n        <p md-line>createdDate: {{order.createdDate | date:\\\"dd.MM.yyyy HH:mm\\\"}}</p>\\n        <p md-line>updatedDate: {{order.createdDate | date:\\\"dd.MM.yyyy HH:mm\\\"}}</p>\\n        <p md-line>version: {{order.version}}</p>\\n      </md-list-item>\\n    </md-list>\\n  </md-card-content>\\n  <md-card-actions align=\\\"end\\\">\\n    <button md-raised-button color=\\\"primary\\\" (click)=\\\"editOrder(order)\\\">edit</button>\\n    <button md-raised-button color=\\\"accent\\\" (click)=\\\"removeOrder(order)\\\">remove</button>\\n  </md-card-actions>\\n</md-card>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/frontend/app/+order/order.component.html\n// module id = 1062\n// module chunks = 1","module.exports = \".ordercard {\\n  margin: 10px 10px; }\\n\\nform > md-input {\\n  width: 100%; }\\n\\n.md-hint {\\n  height: 1.5em; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/frontend/app/+order/order.component.scss\n// module id = 1064\n// module chunks = 1"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA0BA;AAAA;AAEA;AADA;AAzBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAGA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AAEA;AAOA;AAOA;AAAA;AAAA;AALA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AA7HA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AA2HA;;AAAA;AA1HA;;;;;;;;ACXA;;;;;;;ACAA;;;;","sourceRoot":""}